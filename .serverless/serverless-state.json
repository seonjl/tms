{
  "service": {
    "service": "task-management-service",
    "serviceObject": {
      "name": "task-management-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "stage": "production",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TMSSystemTable",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      },
      "environment": {
        "stage": "production"
      },
      "httpApi": {
        "cors": true
      },
      "deploymentBucket": "task-management-service-production-deployment-bucket",
      "region": "ap-northeast-2",
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "task-management-service-production-deployment-bucket",
        "blockPublicAccess": true
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "S3ObjectCreatedEventFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-s3ObjectCreatedEventFunction"
            }
          },
          "V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-v1_auth_google_authorize"
            }
          },
          "V1UnderscoreauthUnderscoregoogleUnderscorerefreshLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-v1_auth_google_refresh"
            }
          },
          "V1UnderscoreauthUnderscoregoogleUnderscorerevokeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-v1_auth_google_revoke"
            }
          },
          "V1UnderscorefileUnderscorelistLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-v1_file_list"
            }
          },
          "V1UnderscorefileUnderscoreuploadLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-v1_file_upload"
            }
          },
          "V1UnderscoretaskUnderscorecreateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-v1_task_create"
            }
          },
          "V1UnderscoretaskUnderscorelistLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-v1_task_list"
            }
          },
          "V1UnderscoretaskUnderscoreupdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-v1_task_update"
            }
          },
          "InternalUnderscoredocsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-internal_docs"
            }
          },
          "InternalUnderscorehealthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-internal_health"
            }
          },
          "NotificationLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-service-production-NotificationLambda"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "task-management-service",
                        "production",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-management-service-production*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-management-service-production*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "task-management-service",
                    "production",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "S3ObjectCreatedEventFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/lambda/event/s3-object-created.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-s3ObjectCreatedEventFunction",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "S3ObjectCreatedEventFunctionLogGroup"
            ]
          },
          "V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/routes/v1/auth/google/authorize.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-v1_auth_google_authorize",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLogGroup"
            ]
          },
          "V1UnderscoreauthUnderscoregoogleUnderscorerefreshLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/routes/v1/auth/google/refresh.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-v1_auth_google_refresh",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "V1UnderscoreauthUnderscoregoogleUnderscorerefreshLogGroup"
            ]
          },
          "V1UnderscoreauthUnderscoregoogleUnderscorerevokeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/routes/v1/auth/google/revoke.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-v1_auth_google_revoke",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "V1UnderscoreauthUnderscoregoogleUnderscorerevokeLogGroup"
            ]
          },
          "V1UnderscorefileUnderscorelistLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/routes/v1/file/list.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-v1_file_list",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "V1UnderscorefileUnderscorelistLogGroup"
            ]
          },
          "V1UnderscorefileUnderscoreuploadLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/routes/v1/file/upload.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-v1_file_upload",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "V1UnderscorefileUnderscoreuploadLogGroup"
            ]
          },
          "V1UnderscoretaskUnderscorecreateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/routes/v1/task/create.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-v1_task_create",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "V1UnderscoretaskUnderscorecreateLogGroup"
            ]
          },
          "V1UnderscoretaskUnderscorelistLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/routes/v1/task/list.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-v1_task_list",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "V1UnderscoretaskUnderscorelistLogGroup"
            ]
          },
          "V1UnderscoretaskUnderscoreupdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/routes/v1/task/update.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-v1_task_update",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "V1UnderscoretaskUnderscoreupdateLogGroup"
            ]
          },
          "InternalUnderscoredocsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/routes/internal/docs.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-internal_docs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "InternalUnderscoredocsLogGroup"
            ]
          },
          "InternalUnderscorehealthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/routes/internal/health.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-internal_health",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "InternalUnderscorehealthLogGroup"
            ]
          },
          "NotificationLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/task-management-service.zip"
              },
              "Handler": "dist/lambda/stream/ddb-record-changed.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-management-service-production-NotificationLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "stage": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotificationLambdaLogGroup"
            ]
          },
          "S3ObjectCreatedEventFunctionLambdaVersion2XwKBCfjOPiTKz2lEwbapxjn1dH0cZrgkIPXAI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "S3ObjectCreatedEventFunctionLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLambdaVersionO0rmlDURUMpBUWDFGtUZpeuPFwZJGiJmKB2zRH2UA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "V1UnderscoreauthUnderscoregoogleUnderscorerefreshLambdaVersionwE0S9e2PPRbk9dhCBkTHlywcANUnYzk7mNMFo0qBEE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "V1UnderscoreauthUnderscoregoogleUnderscorerefreshLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "V1UnderscoreauthUnderscoregoogleUnderscorerevokeLambdaVersionmsukXK4Po2CrhD5E6RT3FJPu7Pnz6P70gaxau0Uo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "V1UnderscoreauthUnderscoregoogleUnderscorerevokeLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "V1UnderscorefileUnderscorelistLambdaVersiond0Q3b5G1rBquPP1y3USPo61UHYTfvkZwwy9Fcty1j5I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "V1UnderscorefileUnderscorelistLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "V1UnderscorefileUnderscoreuploadLambdaVersion0yrwzpO6DWxmFl4jy6WblAvygLbklKQABqUvx9eiio": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "V1UnderscorefileUnderscoreuploadLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "V1UnderscoretaskUnderscorecreateLambdaVersion4sKTOk0ctCl0vyAvBjxxnlr9eQnFYNbX6OmMivRV2dE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "V1UnderscoretaskUnderscorecreateLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "V1UnderscoretaskUnderscorelistLambdaVersion5R5omzhtwMeU3pVznQqE6hiHWeh4rsetwAEeGyY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "V1UnderscoretaskUnderscorelistLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "V1UnderscoretaskUnderscoreupdateLambdaVersionwOcNfYKZ8BCJuFigT5EElb4a95De93P5DvNIHw1B4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "V1UnderscoretaskUnderscoreupdateLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "InternalUnderscoredocsLambdaVersiondBeGPbeBpXh6msyKRiVZEWB94q0Gb4YkNiwZi6ulJMg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "InternalUnderscoredocsLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "InternalUnderscorehealthLambdaVersioneIDxMSouOegMSnfwevbrM1Iy23JTGhVL8mEQxv7EU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "InternalUnderscorehealthLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "NotificationLambdaLambdaVersionpt2iBV4OP2JfmBg32kkHNHtWDDxDyMK4HypWShto": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NotificationLambdaLambdaFunction"
              },
              "CodeSha256": "1hv9GYgWx+QnZsUAs0z6huKU0h/L+eUt5s4EgKqkrKM="
            }
          },
          "S3ObjectCreatedEventFunctionCustomS31": {
            "Type": "Custom::S3",
            "Version": 1,
            "DependsOn": [
              "S3ObjectCreatedEventFunctionLambdaFunction",
              "CustomDashresourceDashexistingDashs3LambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashexistingDashs3LambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "task-management-service-production-s3ObjectCreatedEventFunction",
              "BucketName": {
                "Ref": "FileInventoryBucket"
              },
              "BucketConfigs": [
                {
                  "Event": "s3:ObjectCreated:*",
                  "Rules": []
                }
              ]
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "production",
                        "task-management-service",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "s3",
                              "",
                              "",
                              {
                                "Ref": "FileInventoryBucket"
                              }
                            ]
                          ]
                        },
                        "Action": [
                          "s3:PutBucketNotification",
                          "s3:GetBucketNotification"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "lambda",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "function",
                              "*"
                            ]
                          ]
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashexistingDashs3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "task-management-service-production-deployment-bucket",
                "S3Key": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z/custom-resources.zip"
              },
              "FunctionName": "task-management-service-production-custom-resource-existing-s3",
              "Handler": "s3/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs16.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "production-task-management-service",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "POST",
                  "GET",
                  "PUT"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationV1UnderscoreauthUnderscoregoogleUnderscoreauthorize": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostV1AuthGoogleAuthorize": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /v1/auth/google/authorize",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationV1UnderscoreauthUnderscoregoogleUnderscoreauthorize"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationV1UnderscoreauthUnderscoregoogleUnderscoreauthorize"
          },
          "V1UnderscoreauthUnderscoregoogleUnderscorerefreshLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "V1UnderscoreauthUnderscoregoogleUnderscorerefreshLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationV1UnderscoreauthUnderscoregoogleUnderscorerefresh": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"V1UnderscoreauthUnderscoregoogleUnderscorerefreshLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostV1AuthGoogleRefresh": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /v1/auth/google/refresh",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationV1UnderscoreauthUnderscoregoogleUnderscorerefresh"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationV1UnderscoreauthUnderscoregoogleUnderscorerefresh"
          },
          "V1UnderscoreauthUnderscoregoogleUnderscorerevokeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "V1UnderscoreauthUnderscoregoogleUnderscorerevokeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationV1UnderscoreauthUnderscoregoogleUnderscorerevoke": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"V1UnderscoreauthUnderscoregoogleUnderscorerevokeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostV1AuthGoogleRevoke": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /v1/auth/google/revoke",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationV1UnderscoreauthUnderscoregoogleUnderscorerevoke"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationV1UnderscoreauthUnderscoregoogleUnderscorerevoke"
          },
          "V1UnderscorefileUnderscorelistLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "V1UnderscorefileUnderscorelistLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationV1UnderscorefileUnderscorelist": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"V1UnderscorefileUnderscorelistLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetV1Files": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /v1/files",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationV1UnderscorefileUnderscorelist"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationV1UnderscorefileUnderscorelist"
          },
          "V1UnderscorefileUnderscoreuploadLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "V1UnderscorefileUnderscoreuploadLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationV1UnderscorefileUnderscoreupload": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"V1UnderscorefileUnderscoreuploadLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostV1FilesUpload": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /v1/files/upload",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationV1UnderscorefileUnderscoreupload"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationV1UnderscorefileUnderscoreupload"
          },
          "V1UnderscoretaskUnderscorecreateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "V1UnderscoretaskUnderscorecreateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationV1UnderscoretaskUnderscorecreate": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"V1UnderscoretaskUnderscorecreateLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostV1Tasks": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /v1/tasks",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationV1UnderscoretaskUnderscorecreate"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationV1UnderscoretaskUnderscorecreate"
          },
          "V1UnderscoretaskUnderscorelistLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "V1UnderscoretaskUnderscorelistLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationV1UnderscoretaskUnderscorelist": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"V1UnderscoretaskUnderscorelistLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetV1Tasks": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /v1/tasks",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationV1UnderscoretaskUnderscorelist"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationV1UnderscoretaskUnderscorelist"
          },
          "V1UnderscoretaskUnderscoreupdateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "V1UnderscoretaskUnderscoreupdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationV1UnderscoretaskUnderscoreupdate": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"V1UnderscoretaskUnderscoreupdateLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutV1TasksTaskidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /v1/tasks/{taskId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationV1UnderscoretaskUnderscoreupdate"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationV1UnderscoretaskUnderscoreupdate"
          },
          "InternalUnderscoredocsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "InternalUnderscoredocsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationInternalUnderscoredocs": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"InternalUnderscoredocsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetInternalDocs": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /internal/docs",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationInternalUnderscoredocs"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationInternalUnderscoredocs"
          },
          "InternalUnderscorehealthLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "InternalUnderscorehealthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationInternalUnderscorehealth": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"InternalUnderscorehealthLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetInternalHealth": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /internal/health",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationInternalUnderscorehealth"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationInternalUnderscorehealth"
          },
          "TMSSystemTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "TMSSystemTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sk",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "entity_type",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "due_date",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sk",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "statusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "pk",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "status",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "dueDateIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "pk",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "due_date",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "EntityTypeIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "pk",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "entity_type",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                }
              ],
              "StreamSpecification": {
                "StreamViewType": "NEW_IMAGE"
              }
            }
          },
          "FileInventoryBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "file-inventory-bucket-yaho",
              "AccessControl": "Private",
              "VersioningConfiguration": {
                "Status": "Enabled"
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              },
              "LifecycleConfiguration": {
                "Rules": [
                  {
                    "Id": "DeleteOldFiles",
                    "Status": "Enabled",
                    "ExpirationInDays": 30
                  }
                ]
              }
            }
          },
          "TaskNotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "task-notification-topic",
              "DisplayName": "Task Notification Topic",
              "Subscription": [
                {
                  "Endpoint": "roy@reconlabs.ai",
                  "Protocol": "email"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "task-management-service-production-deployment-bucket",
            "Export": {
              "Name": "sls-task-management-service-production-ServerlessDeploymentBucketName"
            }
          },
          "S3ObjectCreatedEventFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "S3ObjectCreatedEventFunctionLambdaVersion2XwKBCfjOPiTKz2lEwbapxjn1dH0cZrgkIPXAI"
            },
            "Export": {
              "Name": "sls-task-management-service-production-S3ObjectCreatedEventFunctionLambdaFunctionQualifiedArn"
            }
          },
          "V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLambdaVersionO0rmlDURUMpBUWDFGtUZpeuPFwZJGiJmKB2zRH2UA"
            },
            "Export": {
              "Name": "sls-task-management-service-production-V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLambdaFunctionQualifiedArn"
            }
          },
          "V1UnderscoreauthUnderscoregoogleUnderscorerefreshLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "V1UnderscoreauthUnderscoregoogleUnderscorerefreshLambdaVersionwE0S9e2PPRbk9dhCBkTHlywcANUnYzk7mNMFo0qBEE"
            },
            "Export": {
              "Name": "sls-task-management-service-production-V1UnderscoreauthUnderscoregoogleUnderscorerefreshLambdaFunctionQualifiedArn"
            }
          },
          "V1UnderscoreauthUnderscoregoogleUnderscorerevokeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "V1UnderscoreauthUnderscoregoogleUnderscorerevokeLambdaVersionmsukXK4Po2CrhD5E6RT3FJPu7Pnz6P70gaxau0Uo"
            },
            "Export": {
              "Name": "sls-task-management-service-production-V1UnderscoreauthUnderscoregoogleUnderscorerevokeLambdaFunctionQualifiedArn"
            }
          },
          "V1UnderscorefileUnderscorelistLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "V1UnderscorefileUnderscorelistLambdaVersiond0Q3b5G1rBquPP1y3USPo61UHYTfvkZwwy9Fcty1j5I"
            },
            "Export": {
              "Name": "sls-task-management-service-production-V1UnderscorefileUnderscorelistLambdaFunctionQualifiedArn"
            }
          },
          "V1UnderscorefileUnderscoreuploadLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "V1UnderscorefileUnderscoreuploadLambdaVersion0yrwzpO6DWxmFl4jy6WblAvygLbklKQABqUvx9eiio"
            },
            "Export": {
              "Name": "sls-task-management-service-production-V1UnderscorefileUnderscoreuploadLambdaFunctionQualifiedArn"
            }
          },
          "V1UnderscoretaskUnderscorecreateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "V1UnderscoretaskUnderscorecreateLambdaVersion4sKTOk0ctCl0vyAvBjxxnlr9eQnFYNbX6OmMivRV2dE"
            },
            "Export": {
              "Name": "sls-task-management-service-production-V1UnderscoretaskUnderscorecreateLambdaFunctionQualifiedArn"
            }
          },
          "V1UnderscoretaskUnderscorelistLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "V1UnderscoretaskUnderscorelistLambdaVersion5R5omzhtwMeU3pVznQqE6hiHWeh4rsetwAEeGyY"
            },
            "Export": {
              "Name": "sls-task-management-service-production-V1UnderscoretaskUnderscorelistLambdaFunctionQualifiedArn"
            }
          },
          "V1UnderscoretaskUnderscoreupdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "V1UnderscoretaskUnderscoreupdateLambdaVersionwOcNfYKZ8BCJuFigT5EElb4a95De93P5DvNIHw1B4"
            },
            "Export": {
              "Name": "sls-task-management-service-production-V1UnderscoretaskUnderscoreupdateLambdaFunctionQualifiedArn"
            }
          },
          "InternalUnderscoredocsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "InternalUnderscoredocsLambdaVersiondBeGPbeBpXh6msyKRiVZEWB94q0Gb4YkNiwZi6ulJMg"
            },
            "Export": {
              "Name": "sls-task-management-service-production-InternalUnderscoredocsLambdaFunctionQualifiedArn"
            }
          },
          "InternalUnderscorehealthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "InternalUnderscorehealthLambdaVersioneIDxMSouOegMSnfwevbrM1Iy23JTGhVL8mEQxv7EU"
            },
            "Export": {
              "Name": "sls-task-management-service-production-InternalUnderscorehealthLambdaFunctionQualifiedArn"
            }
          },
          "NotificationLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NotificationLambdaLambdaVersionpt2iBV4OP2JfmBg32kkHNHtWDDxDyMK4HypWShto"
            },
            "Export": {
              "Name": "sls-task-management-service-production-NotificationLambdaLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-task-management-service-production-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-task-management-service-production-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-deployment-bucket"
    ],
    "pluginsData": {},
    "functions": {
      "s3ObjectCreatedEventFunction": {
        "handler": "dist/lambda/event/s3-object-created.handler",
        "events": [
          {
            "s3": {
              "bucket": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleCustomResourcesLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][0][\"Resource\"][\"Fn::Join\"][1][5]"
              },
              "event": "s3:ObjectCreated:*",
              "existing": true
            }
          }
        ],
        "name": "task-management-service-production-s3ObjectCreatedEventFunction",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "S3ObjectCreatedEventFunctionLambdaVersion2XwKBCfjOPiTKz2lEwbapxjn1dH0cZrgkIPXAI"
      },
      "v1_auth_google_authorize": {
        "handler": "dist/routes/v1/auth/google/authorize.handler",
        "events": [
          {
            "httpApi": {
              "method": "POST",
              "path": "/v1/auth/google/authorize"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/v1/auth/google/authorize"
          }
        ],
        "name": "task-management-service-production-v1_auth_google_authorize",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "V1UnderscoreauthUnderscoregoogleUnderscoreauthorizeLambdaVersionO0rmlDURUMpBUWDFGtUZpeuPFwZJGiJmKB2zRH2UA"
      },
      "v1_auth_google_refresh": {
        "handler": "dist/routes/v1/auth/google/refresh.handler",
        "events": [
          {
            "httpApi": {
              "method": "POST",
              "path": "/v1/auth/google/refresh"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/v1/auth/google/refresh"
          }
        ],
        "name": "task-management-service-production-v1_auth_google_refresh",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "V1UnderscoreauthUnderscoregoogleUnderscorerefreshLambdaVersionwE0S9e2PPRbk9dhCBkTHlywcANUnYzk7mNMFo0qBEE"
      },
      "v1_auth_google_revoke": {
        "handler": "dist/routes/v1/auth/google/revoke.handler",
        "events": [
          {
            "httpApi": {
              "method": "POST",
              "path": "/v1/auth/google/revoke"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/v1/auth/google/revoke"
          }
        ],
        "name": "task-management-service-production-v1_auth_google_revoke",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "V1UnderscoreauthUnderscoregoogleUnderscorerevokeLambdaVersionmsukXK4Po2CrhD5E6RT3FJPu7Pnz6P70gaxau0Uo"
      },
      "v1_file_list": {
        "handler": "dist/routes/v1/file/list.handler",
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/v1/files"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/v1/files"
          }
        ],
        "name": "task-management-service-production-v1_file_list",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "V1UnderscorefileUnderscorelistLambdaVersiond0Q3b5G1rBquPP1y3USPo61UHYTfvkZwwy9Fcty1j5I"
      },
      "v1_file_upload": {
        "handler": "dist/routes/v1/file/upload.handler",
        "events": [
          {
            "httpApi": {
              "method": "POST",
              "path": "/v1/files/upload"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/v1/files/upload"
          }
        ],
        "name": "task-management-service-production-v1_file_upload",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "V1UnderscorefileUnderscoreuploadLambdaVersion0yrwzpO6DWxmFl4jy6WblAvygLbklKQABqUvx9eiio"
      },
      "v1_task_create": {
        "handler": "dist/routes/v1/task/create.handler",
        "events": [
          {
            "httpApi": {
              "method": "POST",
              "path": "/v1/tasks"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/v1/tasks"
          }
        ],
        "name": "task-management-service-production-v1_task_create",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "V1UnderscoretaskUnderscorecreateLambdaVersion4sKTOk0ctCl0vyAvBjxxnlr9eQnFYNbX6OmMivRV2dE"
      },
      "v1_task_list": {
        "handler": "dist/routes/v1/task/list.handler",
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/v1/tasks"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/v1/tasks"
          }
        ],
        "name": "task-management-service-production-v1_task_list",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "V1UnderscoretaskUnderscorelistLambdaVersion5R5omzhtwMeU3pVznQqE6hiHWeh4rsetwAEeGyY"
      },
      "v1_task_update": {
        "handler": "dist/routes/v1/task/update.handler",
        "events": [
          {
            "httpApi": {
              "method": "PUT",
              "path": "/v1/tasks/{taskId}"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/v1/tasks/{taskId}"
          }
        ],
        "name": "task-management-service-production-v1_task_update",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "V1UnderscoretaskUnderscoreupdateLambdaVersionwOcNfYKZ8BCJuFigT5EElb4a95De93P5DvNIHw1B4"
      },
      "internal_docs": {
        "handler": "dist/routes/internal/docs.handler",
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/internal/docs"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/internal/docs"
          }
        ],
        "name": "task-management-service-production-internal_docs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "InternalUnderscoredocsLambdaVersiondBeGPbeBpXh6msyKRiVZEWB94q0Gb4YkNiwZi6ulJMg"
      },
      "internal_health": {
        "handler": "dist/routes/internal/health.handler",
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/internal/health"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/internal/health"
          }
        ],
        "name": "task-management-service-production-internal_health",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "InternalUnderscorehealthLambdaVersioneIDxMSouOegMSnfwevbrM1Iy23JTGhVL8mEQxv7EU"
      },
      "NotificationLambda": {
        "handler": "dist/lambda/stream/ddb-record-changed.handler",
        "events": [],
        "name": "task-management-service-production-NotificationLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "NotificationLambdaLambdaVersionpt2iBV4OP2JfmBg32kkHNHtWDDxDyMK4HypWShto"
      }
    },
    "resources": {
      "Resources": {
        "TMSSystemTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "TMSSystemTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "pk",
                "AttributeType": "S"
              },
              {
                "AttributeName": "sk",
                "AttributeType": "S"
              },
              {
                "AttributeName": "entity_type",
                "AttributeType": "S"
              },
              {
                "AttributeName": "status",
                "AttributeType": "S"
              },
              {
                "AttributeName": "due_date",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "pk",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "sk",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "statusIndex",
                "KeySchema": [
                  {
                    "AttributeName": "pk",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "status",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              },
              {
                "IndexName": "dueDateIndex",
                "KeySchema": [
                  {
                    "AttributeName": "pk",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "due_date",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              },
              {
                "IndexName": "EntityTypeIndex",
                "KeySchema": [
                  {
                    "AttributeName": "pk",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "entity_type",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              }
            ],
            "StreamSpecification": {
              "StreamViewType": "NEW_IMAGE"
            }
          }
        },
        "FileInventoryBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "file-inventory-bucket-yaho",
            "AccessControl": "Private",
            "VersioningConfiguration": {
              "Status": "Enabled"
            },
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            },
            "LifecycleConfiguration": {
              "Rules": [
                {
                  "Id": "DeleteOldFiles",
                  "Status": "Enabled",
                  "ExpirationInDays": 30
                }
              ]
            }
          }
        },
        "TaskNotificationTopic": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "task-notification-topic",
            "DisplayName": "Task Notification Topic",
            "Subscription": [
              {
                "Endpoint": "roy@reconlabs.ai",
                "Protocol": "email"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "task-management-service",
      "frameworkVersion": "3",
      "package": {
        "excludeDevDependencies": true,
        "exclude": [
          "src/**",
          ".jest/**",
          "node_modules/.pnpm/**",
          "scripts/**",
          ".eslintrc.yaml",
          ".gitignore",
          "jest.config.ts",
          "makefile",
          "readme.md",
          "tsconfig.json",
          "yarn.lock"
        ],
        "artifactsS3KeyDirname": "serverless/task-management-service/production/code-artifacts",
        "deploymentBucket": "task-management-service-production-deployment-bucket",
        "artifact": "/Users/reconlabs/workspace/recon-assignment/.serverless/task-management-service.zip",
        "artifactDirectoryName": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/reconlabs/workspace/recon-assignment/.serverless/task-management-service.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/task-management-service/production/1721710311049-2024-07-23T04:51:51.049Z",
    "artifact": "task-management-service.zip"
  }
}